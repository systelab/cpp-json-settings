def channel = "testing"
def version = "0.0.0"
def profile = "vs2022.conanprofile"
def packageNameInterface = "JSONSettings"
def packageNameRESTAPI = "JSONSettingsRESTAPI"
def packageNameTestUtilities = "JSONSettingsTestUtilities"
def archs = ['x86', 'x86_64']
def configs = ['Debug', 'Release']

library identifier: "jenkins-pipeline-utils@1.0.12",
 		retriever: modernSCM([
 			$class: "GitSCMSource",
 			remote: "https://bitbucket.org/Systelab/jenkins-pipeline-utils.git",
 			credentialsId: "BitbucketWerfen"
 		])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		string(	name: 'tag',
 				description: 'Version to build (must match the version of the tag that will be checked out), leave blank for checkout of current branch',
 				defaultValue: '',
 				trim: true)
 
 		booleanParam( name: 'stable',
 					  description: 'Show if generated library should be uploaded as stable or testing',
 					  defaultValue: false )
 		
 		booleanParam( name: 'uploadPackage',
 					  description: 'Whether or not to upload conan package',
 					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				cleanupWorkspace()
 				script 
 				{
 					if (params.tag == '')
 					{
 						checkoutFromGIT()
 					}
 					else
 					{
 						version = params.tag
 						checkoutFromGIT(scm.userRemoteConfigs[0].url, "v${version}", true)
 					}
 					channel = params.stable ? "stable" : "testing"
 				}
			}
		}
		
		stage('Build')
		{	
			steps
			{
				script
				{
					archs.each
					{ arch ->
						configs.each
						{ config ->
							stage("Build ${packageNameInterface} ${config}|${arch}")
							{
								def buildFolder = "build/${packageNameInterface}-${config}-${arch}"
								bat script: "conan install . --install-folder ${buildFolder} --profile=${profile} -s arch=${arch} -s build_type=${config}", label: 'Installing dependencies'
								bat script: "conan build . --build-folder ${buildFolder}", label: 'Building'		
								bat script: "conan export-pkg . ${packageNameInterface}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameInterface}/${version}@systelab/${channel}"
								dir("${buildFolder}/bin/${config}")
								{
									bat "JSONSettingsTest.exe --gtest_output=xml:JSONSettingsTest.xml"
								}
							}
							
							stage("Build ${packageNameTestUtilities} ${config}|${arch}")
							{
								def buildFolder = "build/${packageNameTestUtilities}-${config}-${arch}"
								bat script: "conan install test/${packageNameTestUtilities}/conanfile.py --install-folder ${buildFolder} --profile=${profile} -s arch=${arch} -s build_type=${config} -e VERSION=${version} -e CHANNEL=${channel}", label: 'Installing dependencies'
								bat script: "conan build test/${packageNameTestUtilities}/conanfile.py --build-folder ${buildFolder}", label: 'Building'		
								bat script: "conan export-pkg test/${packageNameTestUtilities}/conanfile.py ${packageNameTestUtilities}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameTestUtilities}/${version}@systelab/${channel}"
							}
							
							stage("Build ${packageNameRESTAPI} ${config}|${arch}")
							{
								def buildFolder = "build/${packageNameRESTAPI}-${config}-${arch}"
								bat script: "conan install src/${packageNameRESTAPI}/conanfile.py --install-folder ${buildFolder} --profile=${profile} -s arch=${arch} -s build_type=${config} -e VERSION=${version} -e CHANNEL=${channel}", label: 'Installing dependencies'
								bat script: "conan build src/${packageNameRESTAPI}/conanfile.py --build-folder ${buildFolder}", label: 'Building'		
								bat script: "conan export-pkg src/${packageNameRESTAPI}/conanfile.py ${packageNameRESTAPI}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameRESTAPI}/${version}@systelab/${channel}"
								dir("${buildFolder}/bin/${config}")
								{
									bat "JSONSettingsRESTAPITest.exe --gtest_output=xml:JSONSettingsRESTAPITest.xml"
								}
							}
						}
					}
				}
			}
		}

		stage('Test Packages')
		{
			steps
			{
				script
				{
					archs.each
					{ arch ->
						configs.each
						{ config ->
							bat script: "conan test test_package/conanfile.py ${packageNameInterface}/${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
							bat script: "conan test test/${packageNameTestUtilities}/test_package/conanfile.py ${packageNameTestUtilities}/${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
							bat script: "conan test src/${packageNameRESTAPI}/test_package/conanfile.py ${packageNameRESTAPI}/${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { return params.uploadPackage }
			}
			steps
			{
				script
				{
					sh "conan upload JSONSettings/${version}@systelab/${channel} --all -r systelab-conan-local --force"
					sh "conan upload JSONSettingsRESTAPI/${version}@systelab/${channel} --all -r systelab-conan-local --force"
					sh "conan upload JSONSettingsTestUtilities/${version}@systelab/${channel} --all -r systelab-conan-local --force"
				}
			}
		}
	}
	
	post
	{
		always
		{
			junit allowEmptyResults: true, testResults: "build*/JSONSettingsTest.xml"
			junit allowEmptyResults: true, testResults: "build*/JSONSettingsRESTAPITest.xml"
			script
 			{
 				currentBuild.description = "${version}/${channel}"
 			}
 			cleanupWorkspace()
		}
	}
}